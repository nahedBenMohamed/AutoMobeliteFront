generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id            Int      @id @default(autoincrement())
  agencyId      Int
  reservationId Int?
  message       String   @db.VarChar(500)
  readStatus    Boolean  @default(false) @map("read_status")
  createdAt     DateTime @default(now()) @map("created_at")
  Agency        Agency   @relation(fields: [agencyId], references: [id])
  Reservation   Rental?  @relation(fields: [reservationId], references: [id])
}

model Client {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(100)
  firstname     String     @db.VarChar(100)
  email         String     @unique @db.VarChar(100)
  password      String     @db.VarChar(200)
  telephone     String     @db.VarChar(100)
  numPermis     String     @db.VarChar(15)
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  emailVerified Boolean    @default(false)
  role          ClientRole @default(user)
  status        Status     @default(deactivate)
  address       String     @db.VarChar(150)
  city          String     @db.VarChar(100)
  rentals       Rental[]
}

model AgencyUser {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  firstname String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(200)
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  role      UserRole @default(admin)
  status    Status   @default(activate)
  Agency    Agency?
}

model Agency {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(50)
  address       String         @db.VarChar(200)
  email         String         @unique @db.VarChar(100)
  telephone     String         @db.VarChar(15)
  responsibleId Int            @unique
  image         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  status        Status         @default(activate)
  AgencyUser    AgencyUser     @relation(fields: [responsibleId], references: [id])
  Cars          Car[]
  Notification  Notification[]
  Parking       Parking[]
}

model Parking {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  agencyId  Int
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  address   String   @db.VarChar(200)
  city      String   @db.VarChar(200)
  Car       Car[]
  Agency    Agency   @relation(fields: [agencyId], references: [id])
}

model Car {
  id           Int            @id @default(autoincrement())
  agencyId     Int
  brand        String         @db.VarChar(100)
  model        String         @db.VarChar(100)
  year         Int
  mileage      Int
  price        Float
  registration String         @db.VarChar(20)
  parkingId    Int?
  description  String?        @db.VarChar(300)
  fuel         String         @db.VarChar(50)
  door         Int
  gearBox      String         @db.VarChar(25)
  image        String?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @map("updated_at")
  availability Availability[]
  Agency       Agency         @relation(fields: [agencyId], references: [id])
  parking      Parking?       @relation(fields: [parkingId], references: [id])
  maintenances Maintenance[]
  rentals      Rental[]
}

model Rental {
  id           Int            @id @default(autoincrement())
  clientId     Int
  carId        Int
  startDate    DateTime
  endDate      DateTime
  startTime    DateTime
  endTime      DateTime
  total        Float
  status       RentalStatus   @default(reserved)
  Notification Notification[]
  car          Car            @relation(fields: [carId], references: [id], onDelete: Cascade)
  client       Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Maintenance {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(350)
  carId       Int
  cost        Float
  endDate     DateTime
  startDate   DateTime
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model Availability {
  id        Int      @id @default(autoincrement())
  carId     Int
  date      DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  car       Car      @relation(fields: [carId], references: [id])
}

enum UserRole {
  admin
  superAdmin
}

enum ClientRole {
  user
}

enum RentalStatus {
  reserved
  ongoing
  completed
  cancelled
}

enum Status {
  activate
  deactivate
}
