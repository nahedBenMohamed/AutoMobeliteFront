generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(100)
  firstname     String     @db.VarChar(100)
  email         String     @unique @db.VarChar(200)
  password      String     @db.VarChar(200)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  emailVerified Boolean    @default(false)
  telephone     String     @db.VarChar(100)
  role          ClientRole @default(user)
  rentals       Rental[]
}

model AgencyUser {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  firstname String   @db.VarChar(100)
  email     String   @unique @db.VarChar(200)
  password  String   @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  role      UserRole @default(admin)
  Agency    Agency?
}

model Agency {
  id            Int        @id @default(autoincrement())
  name          String     @unique @db.VarChar(100)
  address       String     @db.VarChar(100)
  email         String     @unique @db.VarChar(200)
  telephone     String     @db.VarChar(100)
  responsibleId Int        @unique
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  AgencyUser    AgencyUser @relation(fields: [responsibleId], references: [id])
  Cars          Car[]
  Parking       Parking[]
}

model Car {
  id           Int           @id @default(autoincrement())
  agencyId     Int
  brand        String        @db.VarChar(100)
  model        String        @db.VarChar(100)
  year         Int
  mileage      Int
  price        Float
  registration String
  images       String[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  status       CarStatus     @default(available)
  parkingName  String?       @db.VarChar(100)
  Agency       Agency        @relation(fields: [agencyId], references: [id])
  parking      Parking?      @relation(fields: [parkingName], references: [name])
  maintenances Maintenance[]
  rentals      Rental[]
}

model Rental {
  id        Int          @id @default(autoincrement())
  clientId  Int
  carId     Int
  startDate DateTime
  endDate   DateTime
  total     Float
  status    RentalStatus @default(reserved)
  car       Car          @relation(fields: [carId], references: [id], onDelete: Cascade)
  client    Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Maintenance {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String   @db.VarChar(300)
  carId       Int
  cost        Float
  car         Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model Parking {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  agencyId  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  address   String   @db.VarChar(100)
  city      String   @db.VarChar(100)
  Car       Car[]
  Agency    Agency   @relation(fields: [agencyId], references: [id])
}

enum UserRole {
  admin
  superAdmin
}

enum ClientRole {
  user
}

enum CarStatus {
  available
  rented
  maintenance
}

enum RentalStatus {
  reserved
  ongoing
  completed
}
