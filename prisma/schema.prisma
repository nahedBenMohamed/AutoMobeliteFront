generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  clientId          Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  client            Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique
  clientId     Int
  expires      DateTime
  userAgencyId String
  client       Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userAgency   UserAgency @relation(fields: [userAgencyId], references: [name])
}

model Client {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(100)
  firstname     String     @db.VarChar(100)
  email         String     @unique @db.VarChar(200)
  password      String     @db.VarChar(200)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  emailVerified Boolean    @default(false)
  accounts      Account[]
  locations     Location[]
  sessions      Session[]
}

model UserAgency {
  name      String    @id @db.VarChar(100)
  firstname String    @db.VarChar(100)
  email     String    @unique @db.VarChar(200)
  password  String    @db.VarChar(200)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  role      UserRole  @default(admin)
  Agence    Agence[]
  sessions  Session[]
}

model Agence {
  name            String     @id @db.VarChar(100)
  adresse         String     @db.VarChar(100)
  email           String     @unique @db.VarChar(200)
  telephone       String     @db.VarChar(100)
  responsableName String     @db.VarChar(100)
  UserAgency      UserAgency @relation(fields: [responsableName], references: [name])
  Voiture         Voiture[]
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @default(now()) @map("updated_at")
}

model Voiture {
  id           Int           @id @default(autoincrement())
  agenceName   String        @db.VarChar(100)
  marque       String        @db.VarChar(100)
  modele       String        @db.VarChar(100)
  annee        Int
  kilometrage  Int
  prix         Float
  matricule    String
  images       String[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  etat         CarState      @default(disponible)
  locations    Location[]
  maintenances Maintenance[]
  Agence       Agence        @relation(fields: [agenceName], references: [name])
}

model Location {
  id            Int           @id @default(autoincrement())
  utilisateurId Int
  voitureId     Int
  dateDeDebut   DateTime
  dateDeFin     DateTime
  total         Float
  etat          LocationState @default(reservee)
  client        Client        @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  voiture       Voiture       @relation(fields: [voitureId], references: [id], onDelete: Cascade)
  paiements     Paiement[]
}

model Paiement {
  id         Int           @id @default(autoincrement())
  locationId Int
  montant    Float
  date       DateTime
  methode    PaymentMethod @default(carteDeCredit)
  etat       PaymentState  @default(attente)
  location   Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Maintenance {
  id          Int      @id @default(autoincrement())
  voitureId   Int
  date        DateTime
  description String   @db.VarChar(300)
  cout        Float
  voiture     Voiture  @relation(fields: [voitureId], references: [id], onDelete: Cascade)
}

enum UserRole {
  admin
  superAdmin
}

enum CarState {
  disponible
  louee
  maintenance
}

enum LocationState {
  reservee
  enCours
  terminee
}

enum PaymentMethod {
  carteDeCredit
  presentielle
}

enum PaymentState {
  attente
  reussi
  echoue
}
